/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2021-04-16 05:12:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pro;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\t #tbl {width:1400px; overflow:hidden;margin: 0px auto;}\r\n");
      out.write("   \t #tbl .box {width:250px; float:left; margin:10px; padding:10px;}\r\n");
      out.write("\t .del0{color:black; font-weight:bold;}\r\n");
      out.write(" \t .del1{background:red; color:#BAD1E6; font-weight:bold; width:80px;text-align:center;}\r\n");
      out.write(" \t .prod_name{white-space:nowrap; overflow:hidden; text-overflow:ellipsis; \r\n");
      out.write("                font-size:14px; width:250px;}\r\n");
      out.write("</style>\r\n");
      out.write("<div>\r\n");
      out.write("\t<div style=\"float:left;\">\r\n");
      out.write("\t\t\t\t<select id=\"key\">\r\n");
      out.write("\t\t\t<option value=\"prod_id\">상품코드</option>\r\n");
      out.write("\t\t\t<option value=\"prod_name\">상품명</option>\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t\t<input type=\"text\" id=\"word\" placeholder=\"검색어\"/>\r\n");
      out.write("\t\t<select id=\"perpage\">\r\n");
      out.write("\t\t\t<option value=4>4개</option>\r\n");
      out.write("\t\t\t<option value=8 selected>8개</option>\r\n");
      out.write("\t\t\t<option value=12>12개</option>\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t\t<span id=\"count\"></span>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div style=\"float:right;\">\r\n");
      out.write("\t\t<select id=\"order\">\r\n");
      out.write("\t\t\t<option value=\"prod_id\">코드순</option>\r\n");
      out.write("\t\t\t<option value=\"prod_name\">상품명순</option>\r\n");
      out.write("\t\t\t<option value=\"price\">가격순</option>\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t\t<select id=\"desc\">\r\n");
      out.write("\t\t\t<option value=\"desc\">내림차순</option>\r\n");
      out.write("\t\t\t<option value=\"asc\">오름차순</option>\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"tbl\"></div>\r\n");
      out.write("<script id=\"temp\" type=\"text/x-handlebars-template\">\r\n");
      out.write("\t{{#each array}}\r\n");
      out.write("\t<div class=\"box\" pid=\"{{prod_id}}\" pname=\"{{prod_name}}\" price={{price}}>\r\n");
      out.write("\t\r\n");
      out.write("\t<img src=\"{{pntImage image}}\" style=\"cursor:pointer\" width=200 height=220 onClick=\"location.href='/pro/pdetail?prod_id={{prod_id}}'\"/>\r\n");
      out.write("\t\r\n");
      out.write("\t\t<div>{{prod_id}}</div>\r\n");
      out.write("\t\t<div class=\"prod_name\">{{prod_name}}</div>\r\n");
      out.write("\t\t<div>{{nf price}}원</div>\r\n");
      out.write("\t\t<div class=\"del{{prod_del}}\">{{status prod_del}}</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t{{/each}}\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("\tHandlebars.registerHelper(\"pntImage\", function(image){\r\n");
      out.write("\t\tif(!image){\r\n");
      out.write("\t\t\treturn \"http://placehold.it/150x115\";\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn \"/product/img/\" + image;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tHandlebars.registerHelper(\"nf\", function(price){\r\n");
      out.write("\t\tvar regexp= /\\B(?=(\\d{3})+(?!\\d))/g;\r\n");
      out.write("\t\treturn price.toString().replace(regexp, \",\");\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tHandlebars.registerHelper(\"status\", function(prod_del){\r\n");
      out.write("\t\tif(prod_del==0){\r\n");
      out.write("\t\t\treturn \"판매중\";\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn \"재고없음\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("<div id=\"pagination\">\r\n");
      out.write("\t\t<button id=\"btnPre\">이전</button>\r\n");
      out.write("\t\t<span id=\"pageInfo\"></span>\r\n");
      out.write("\t\t<button id=\"btnNext\">다음</button>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("   var url=\"/pro/list.json\";\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
